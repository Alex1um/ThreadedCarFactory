package Global;

import javax.swing.*;
import java.awt.*;

public class FactoryControlPanel {
    public JPanel panel1;
    public JPanel settingsPanel;
    public JPanel engineSupplierSettingsPanel;
    public JLabel engineSupplierIntervalLabel;
    public JLabel bodySupplierIntervalLabel;
    public JSlider bodySupplierIntervalSlider;
    public JPanel bodySupplierSettingsPanel;
    public JLabel accessorySuppliersIntervalLabel;
    public JPanel accessorySuppliersSettingsPanel;
    public JSlider accessorySuppliersIntervalSlider;
    public JPanel suppliersPanel;
    public JPanel storagesPanel;
    public JPanel workersPanel;
    public JLabel engineSupplierLabel;
    public JLabel bodySupplierLabel;
    public JLabel engineStorageLabel;
    public JLabel bodyStorageLabel;
    public JLabel accessoryStorageLabel;
    public JPanel carPanel;
    public JLabel carStorageLabel;
    public JPanel factoryPanel;
    public JPanel accessorySuppliersPanel;
    public JPanel dealersPanel;
    public JSlider engineSupplierIntervalSlider;
    public JPanel carAssemblyTasksSettingsPanel;
    public JSlider carAssemblyTimeSlider;
    public JLabel carAssemblyTimeLabel;
    public JSlider dealerIntervalSlider;
    public JLabel dealerIntervalLabel;
    public JPanel dealerSettingsPanel;
    public JLabel carAssemblyTaskCountLabel;
    public JPanel carProducedCountPanel;
    public JLabel carpProducedCountLabel;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        panel1.setPreferredSize(new Dimension(1620, 800));
        settingsPanel = new JPanel();
        settingsPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        settingsPanel.setPreferredSize(new Dimension(357, 224));
        panel1.add(settingsPanel, BorderLayout.EAST);
        engineSupplierSettingsPanel = new JPanel();
        engineSupplierSettingsPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        settingsPanel.add(engineSupplierSettingsPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        engineSupplierIntervalLabel = new JLabel();
        engineSupplierIntervalLabel.setText("Label");
        engineSupplierSettingsPanel.add(engineSupplierIntervalLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        engineSupplierIntervalSlider = new JSlider();
        engineSupplierIntervalSlider.setMajorTickSpacing(1000);
        engineSupplierIntervalSlider.setMaximum(10000);
        engineSupplierIntervalSlider.setMinimum(100);
        engineSupplierIntervalSlider.setMinorTickSpacing(100);
        engineSupplierIntervalSlider.setPaintLabels(false);
        engineSupplierIntervalSlider.setPaintTicks(false);
        engineSupplierIntervalSlider.setSnapToTicks(true);
        engineSupplierIntervalSlider.setValue(1100);
        engineSupplierIntervalSlider.setValueIsAdjusting(false);
        engineSupplierSettingsPanel.add(engineSupplierIntervalSlider, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bodySupplierSettingsPanel = new JPanel();
        bodySupplierSettingsPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        settingsPanel.add(bodySupplierSettingsPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        bodySupplierIntervalLabel = new JLabel();
        bodySupplierIntervalLabel.setText("Label");
        bodySupplierSettingsPanel.add(bodySupplierIntervalLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bodySupplierIntervalSlider = new JSlider();
        bodySupplierIntervalSlider.setMajorTickSpacing(1000);
        bodySupplierIntervalSlider.setMaximum(10000);
        bodySupplierIntervalSlider.setMinimum(100);
        bodySupplierIntervalSlider.setMinorTickSpacing(100);
        bodySupplierIntervalSlider.setSnapToTicks(true);
        bodySupplierIntervalSlider.setToolTipText("");
        bodySupplierIntervalSlider.setValue(1100);
        bodySupplierSettingsPanel.add(bodySupplierIntervalSlider, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        accessorySuppliersSettingsPanel = new JPanel();
        accessorySuppliersSettingsPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        settingsPanel.add(accessorySuppliersSettingsPanel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        accessorySuppliersIntervalLabel = new JLabel();
        accessorySuppliersIntervalLabel.setText("Label");
        accessorySuppliersSettingsPanel.add(accessorySuppliersIntervalLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        accessorySuppliersIntervalSlider = new JSlider();
        accessorySuppliersIntervalSlider.setMajorTickSpacing(1000);
        accessorySuppliersIntervalSlider.setMaximum(10000);
        accessorySuppliersIntervalSlider.setMinimum(100);
        accessorySuppliersIntervalSlider.setMinorTickSpacing(100);
        accessorySuppliersIntervalSlider.setPaintLabels(false);
        accessorySuppliersIntervalSlider.setSnapToTicks(true);
        accessorySuppliersIntervalSlider.setValue(1100);
        accessorySuppliersSettingsPanel.add(accessorySuppliersIntervalSlider, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        carAssemblyTasksSettingsPanel = new JPanel();
        carAssemblyTasksSettingsPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        settingsPanel.add(carAssemblyTasksSettingsPanel, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        carAssemblyTimeLabel = new JLabel();
        carAssemblyTimeLabel.setText("Label");
        carAssemblyTasksSettingsPanel.add(carAssemblyTimeLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        carAssemblyTimeSlider = new JSlider();
        carAssemblyTimeSlider.setMajorTickSpacing(1000);
        carAssemblyTimeSlider.setMaximum(10000);
        carAssemblyTimeSlider.setMinimum(100);
        carAssemblyTimeSlider.setMinorTickSpacing(100);
        carAssemblyTimeSlider.setPaintLabels(false);
        carAssemblyTimeSlider.setSnapToTicks(true);
        carAssemblyTimeSlider.setValue(1100);
        carAssemblyTasksSettingsPanel.add(carAssemblyTimeSlider, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dealerSettingsPanel = new JPanel();
        dealerSettingsPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        settingsPanel.add(dealerSettingsPanel, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        dealerIntervalLabel = new JLabel();
        dealerIntervalLabel.setText("Label");
        dealerSettingsPanel.add(dealerIntervalLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dealerIntervalSlider = new JSlider();
        dealerIntervalSlider.setMajorTickSpacing(1000);
        dealerIntervalSlider.setMaximum(10000);
        dealerIntervalSlider.setMinimum(100);
        dealerIntervalSlider.setMinorTickSpacing(100);
        dealerIntervalSlider.setPaintLabels(false);
        dealerIntervalSlider.setSnapToTicks(true);
        dealerIntervalSlider.setValue(1100);
        dealerSettingsPanel.add(dealerIntervalSlider, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        factoryPanel = new JPanel();
        factoryPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(6, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(factoryPanel, BorderLayout.CENTER);
        suppliersPanel = new JPanel();
        suppliersPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        factoryPanel.add(suppliersPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        engineSupplierLabel = new JLabel();
        engineSupplierLabel.setText("Label");
        suppliersPanel.add(engineSupplierLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bodySupplierLabel = new JLabel();
        bodySupplierLabel.setText("Label");
        suppliersPanel.add(bodySupplierLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        suppliersPanel.add(accessorySuppliersPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        storagesPanel = new JPanel();
        storagesPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        factoryPanel.add(storagesPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        engineStorageLabel = new JLabel();
        engineStorageLabel.setText("Label");
        storagesPanel.add(engineStorageLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bodyStorageLabel = new JLabel();
        bodyStorageLabel.setText("Label");
        storagesPanel.add(bodyStorageLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        accessoryStorageLabel = new JLabel();
        accessoryStorageLabel.setText("Label");
        storagesPanel.add(accessoryStorageLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        factoryPanel.add(workersPanel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        carPanel = new JPanel();
        carPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        factoryPanel.add(carPanel, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        carStorageLabel = new JLabel();
        carStorageLabel.setText("Label");
        carPanel.add(carStorageLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        carAssemblyTaskCountLabel = new JLabel();
        carAssemblyTaskCountLabel.setText("Label");
        carPanel.add(carAssemblyTaskCountLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        factoryPanel.add(dealersPanel, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        carProducedCountPanel = new JPanel();
        carProducedCountPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        factoryPanel.add(carProducedCountPanel, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        carpProducedCountLabel = new JLabel();
        carpProducedCountLabel.setText("Total produced cars: 0");
        carProducedCountPanel.add(carpProducedCountLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    public void createUIComponents() {
        accessorySuppliersPanel = new JPanel();
        accessorySuppliersPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, Config.ACCESSORY_SUPPLIER_COUNT, new Insets(0, 0, 0, 0), -1, -1));
        for (int i = 0; i < Config.ACCESSORY_SUPPLIER_COUNT; i++) {
            JLabel label = new JLabel("Accessory supplier");
            label.setOpaque(true);
            accessorySuppliersPanel.add(label, new com.intellij.uiDesigner.core.GridConstraints(0, i, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        }
        workersPanel = new JPanel();
        workersPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, Config.WORKER_COUNT, new Insets(0, 0, 0, 0), -1, -1));
        for (int i = 0; i < Config.WORKER_COUNT; i++) {
            JLabel label = new JLabel("worker");
            label.setOpaque(true);
            workersPanel.add(label, new com.intellij.uiDesigner.core.GridConstraints(0, i, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        }
        dealersPanel = new JPanel();
        dealersPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, Config.DEALER_COUNT, new Insets(0, 0, 0, 0), -1, -1));
        for (int i = 0; i < Config.DEALER_COUNT; i++) {
            JLabel label = new JLabel("dealer");
            label.setOpaque(true);
            dealersPanel.add(label, new com.intellij.uiDesigner.core.GridConstraints(0, i, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        }


        // TODO: place custom component creation code here
    }

    public void addListeners() {

        engineSupplierIntervalSlider.addChangeListener(e -> {
            int newValue = engineSupplierIntervalSlider.getValue();
            DynamicValues.ENGINE_SUPPLY_INTERVAL_MS.set(newValue);
            engineSupplierIntervalLabel.setText(String.format("Engine interval: %dms", newValue));
        });
        engineSupplierIntervalSlider.setValue(DynamicValues.ENGINE_SUPPLY_INTERVAL_MS.get());

        bodySupplierIntervalSlider.addChangeListener(e -> {
            int newValue = bodySupplierIntervalSlider.getValue();
            DynamicValues.BODY_SUPPLY_INTERVAL_MS.set(newValue);
            bodySupplierIntervalLabel.setText(String.format("Body interval: %dms", newValue));
        });
        bodySupplierIntervalSlider.setValue(DynamicValues.BODY_SUPPLY_INTERVAL_MS.get());

        accessorySuppliersIntervalSlider.addChangeListener(e -> {
            int newValue = accessorySuppliersIntervalSlider.getValue();
            DynamicValues.ACCESSORY_SUPPLY_INTERVAL_MS.set(newValue);
            accessorySuppliersIntervalLabel.setText(String.format("Accessory interval: %dms", newValue));
        });
        accessorySuppliersIntervalSlider.setValue(DynamicValues.ACCESSORY_SUPPLY_INTERVAL_MS.get());

        carAssemblyTimeSlider.addChangeListener(e -> {
            int newValue = carAssemblyTimeSlider.getValue();
            DynamicValues.CAR_ASSEMBLE_TASK_DELAY_MS.set(newValue);
            carAssemblyTimeLabel.setText(String.format("Car assembly time: %dms", newValue));
        });
        carAssemblyTimeSlider.setValue(DynamicValues.CAR_ASSEMBLE_TASK_DELAY_MS.get());

        dealerIntervalSlider.addChangeListener(e -> {
            int newValue = dealerIntervalSlider.getValue();
            DynamicValues.DEALER_DELIVERY_INTERVAL_MS.set(newValue);
            dealerIntervalLabel.setText(String.format("dealer sell time: %dms", newValue));
        });
        dealerIntervalSlider.setValue(DynamicValues.DEALER_DELIVERY_INTERVAL_MS.get());
    }
}
